{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Monaco;\f2\fnil\fcharset0 Menlo-Bold;
}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker }{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww16520\viewh14400\viewkind1
\deftab720
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural

\f0\fs22 \cf0 \expnd0\expndtw0\kerning0
Some random design notes\
\
\pard\tx20\tx580\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li560\fi-560\ql\qnatural\pardirnatural
\ls1\ilvl0\cf0 {\listtext	\'95	}Blocks are 2^n x 2^n squares of image data; n can be set in the user preferences for best performance.
\f1 \uc0\u8232 
\f0 \
{\listtext	\'95	}When loading a file, each layer image is rendered out at 100% into a sparse grid of blocks (no image data = blank, filled = fill color).  These are used as textures for OpenGL rendering; when a block is updated in RAM only that block is resent to the GPU.  While image data is stored as a compressed bitmap in the file format (1 bit / pixel), it is converted into 8-bit binary representation in RAM (0x00 and 0xFF).  This data is then loaded onto the GPU using
\f1 \uc0\u8232 \u8232 
\f0 glTexImage2D( GL_TEXTURE_2D, 0, GL_ALPHA, block_width, block_height, 0, GL_ALPHA, GL_UNSIGNED_BYTE, data )
\f1 \uc0\u8232 \u8232 
\f0 The texture is then rendered using a tint color matching that layer/sketch\'92s fill color.
\f1 \uc0\u8232 
\f0 \
{\listtext	\'95	}For texture fill layers, the pixel data is stored in RAM then used as a source (for example a mask) to render the texture sent to the GPU.  There are no fill blocks for texture layers, only empty ones (at least as the GPU sees it).
\f1 \uc0\u8232 
\f0 \
{\listtext	\'95	}Useful links about input across platforms:
\f1 \uc0\u8232 
\f0 http://www.gtk.org/api/2.6/gdk/gdk-Input-Devices.html
\f1 \uc0\u8232 
\f0 https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/EventOverview/HandlingTabletEvents/HandlingTabletEvents.html
\f1 \uc0\u8232 
\f0 http://us.wacom.com/developerrelations/
\f1 \uc0\u8232 
\f0 \
{\listtext	\'95	}Drag vs draw:
\f1 \uc0\u8232 
\f0 On contact event, get the contact area & set the cursor.  If the surface is canvas & a pixel editor is selected it is a draw; if the surface is not locked the draw goes through to pen/eraser/lasso/etc.  Otherwise the action is a drag (check for lock on canvas here too).
\f1 \uc0\u8232 
\f0 \
{\listtext	\'95	}edge extension on save to powers of 2 to save on branches
\f1 \uc0\u8232 
\f0 \
{\listtext	\'95	}at save program determines chunk exponent on a per-layer basis; layers with more wide-spread noise should be saved with larger exponents to save on branches
\f1 \uc0\u8232 
\f0 \
{\listtext	\'95	}canvas/GPU updates:
\f1 \uc0\u8232 \u8232 
\f2\b \expnd0\expndtw0\kerning0
on stroke move
\f0\b0 \expnd0\expndtw0\kerning0
 (includes start): push a high-priority task that will mark affected blocks\'92 mipmaps as invalid, update those blocks\'92 changed timestamps, and draw the substroke onto the block textures for the layer
\f1 \uc0\u8232 \u8232 
\f2\b \expnd0\expndtw0\kerning0
on stroke finish
\f0\b0 \expnd0\expndtw0\kerning0
: push a medium-priority task to update each affected block in RAM
\f1 \uc0\u8232 \u8232 
\f2\b \expnd0\expndtw0\kerning0
block updates
\f0\b0 \expnd0\expndtw0\kerning0
: first compare the undo timestamp in the update task to the block; if it is not lower update the mipmaps for those blocks.  then push undo data (safe as RAM update tasks are only pushed on stroke finish; we also do it every update task instead of just most recent so we don\'92t loose undo data), pull the texture data of the updated layer from the GPU and write it to RAM
\f1 \uc0\u8232 
\f0 \
{\listtext	\'95	}whenever the canvas is redrawn, the mipmap for each unchanged block is drawn; for changed blocks, block textures for layers are rendered separately to composite (this will be a problem once non-binary alpha is introduced - possible to use a shader for nonlinear [ Cs * As + Cd * ( 1 - As ) Ad ] blend then?)}